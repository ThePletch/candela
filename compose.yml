###############################################################
# See README for docker setup and package.json
# for docker command aliases
###############################################################
version: '3.8' # latest docker-compose
volumes:
  database-data:
  database-test-data:
  node-modules:
  vendor-bundle:
  gemfile-monitor:
  package-monitor:

# Mount node_modules as a shared volume, but don't try and overwrite its contents on mount.
# Use this for every container that needs node_modules except the app to avoid
# write contention during provisioning.
x-default-service: &servicedefaults
  build: &builddefaults
    context: .
    ssh:
      - default
  environment: &envdefaults
    SSH_AUTH_SOCK: /ssh-agent/ssh-auth.sock
  volumes:
    - &ssh-pass /run/host-services/:/ssh-agent # pass through ssh agent
    - &cache-app-dir ./:/usr/src/app:cached
    - &ssh-keys ~/.ssh/:/root/.ssh:cached # link ssh keys into container so that npm install works with private github repos
  restart: on-failure
services:
  api:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile-rails
      target: api
    environment:
      <<: *envdefaults
      PORT: 3000
      PIDFILE: /tmp/pid/rails.pid
    ports:
      - '23000:3000'
    container_name: candela-app
    volumes:
      - vendor-bundle:/usr/src/app/vendor/bundle/:cached
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      - type: volume
        source: gemfile-monitor
        target: /usr/src/app/monitors/
        volume:
          nocopy: true
    tmpfs:
      - /tmp/pid
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  nextjs:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile-next
      target: nextjs
    container_name: candela-nextjs
    volumes:
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      - type: volume
        source: package-monitor
        target: /usr/src/app/monitors/
        volume:
          nocopy: true
      - node-modules:/usr/src/app/node_modules/:cached
    ports:
      - '23001:3000'
    depends_on:
      api:
        condition: service_started
  npm-watcher:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile-next
      target: npm-watcher
    volumes:
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      - package-monitor:/usr/src/app/monitors/
      - type: volume
        source: node-modules
        target: /usr/src/app/node_modules/
        volume:
          nocopy: true
    depends_on:
      nextjs:
        condition: service_started
  gemfile-watcher:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile-rails
      target: gemfile-watcher
    volumes:
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      - gemfile-monitor:/usr/src/app/monitors/
      - type: volume
        source: vendor-bundle
        target: /usr/src/app/vendor/bundle/
        volume:
          nocopy: true
    depends_on:
      api:
        condition: service_started
  redis:
    container_name: candela-redis
    image: redis
    ports:
      - '26379:6379'
    restart: on-failure
    healthcheck:
      test: ['CMD', 'redis-cli', '-h', 'localhost', '-p', '6379', 'ping']
      interval: 5s
      timeout: 4s
      retries: 3
  postgres:
    container_name: candela-postgres
    image: public.ecr.aws/docker/library/postgres:14-alpine
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=development
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - '25432:5432'
    restart: on-failure
    volumes:
      - database-data:/var/lib/postgresql/data/:cached # persist data even if container shuts down
    entrypoint: 'docker-entrypoint.sh -i'
    healthcheck:
      # we have to hardcode the host and database because health checks are configured during build,
      # and docker-compose env vars aren't available in the build
      test: 'pg_isready -h localhost -U dev -d development'
      interval: 5s
      timeout: 4s
      retries: 3
      start_period: 60s
  postgres-test:
    container_name: candela-postgres-test
    image: public.ecr.aws/docker/library/postgres:14-alpine
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=test
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - '25433:5432'
    restart: on-failure
    volumes:
      - database-test-data:/var/lib/postgresql/data/:cached # persist data even if container shuts down
    entrypoint: 'docker-entrypoint.sh -i'
    healthcheck:
      # we have to hardcode the host and database because health checks are configured during build,
      # and docker-compose env vars aren't available in the build
      test: 'pg_isready -h localhost -U dev -d test'
      interval: 5s
      timeout: 4s
      retries: 3
      start_period: 60s
